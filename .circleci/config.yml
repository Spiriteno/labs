version: 2.1
jobs: # Блок в котором декларируется список всех существующих этапов непрерывной интеграции проекта
  install-deps: # Название 1-го этапа. Тело - объект описывающий 1й этап. 
    docker: # Блок в котором происходит конфигурирование docker образа. Под Docker образом стоит понимать
    # виртуальную ОС, которая будет создана сервисом CI/CD и в рамках которой будут выполнены комманды, описанные
    # в разделе steps.
      - image: circleci/node:14.15 # Образ из репозитория (docker hub) circleci с названием node и тэгом 14.15.
    # название - соответствует предустановленным зависимостям внутри данного образа, в данном образе
    # предустановлен интерпретатор Node JS. Тэг отвечает за версию (и не только). В конкретном случае,  
    # указана версия Node JS 14.15 
    steps: # Блок описывающий последовательность комманд данного этапа.
      - checkout # комманда отвечающая за загрузку содержимого репозитория проекта (с учётом ветки, в рамках которой
    # выполняется данный этап). Существует возможность запуска конкретного этапа для конкретных веток или ветки, 
    # или каких-либо других условий, в том числе, и ручной запуск этапапа. Все это описывается в блоке workflows. 
      - restore_cache: # Данная комманда отвечает за подгрузку результата выполнения предыдущей 
    # комманды (кэширование результатов выполнения).
         keys: -v1-deps-{{ checksum "yarn.lock" }} #  Инвалидаия кэша (Признание его не актуальным) происходит (в данном 
    # случае на основании контрольных (хэш) сумм файла yarn.lock, который, является автоматически-генерируемым,
    # и содержит список "глубоких" зависимостей (зависимости зависимостей) проекта. Генерируется каждый раз при 
    # запуске комманды yarn (npm эквивалент npm install, только в случае npm, файл называется package-lock.json)
      - run: yarn # Комманда run, позволяет запускать произвольные bash, sh, powershell и т.д комманды внтури 
   # текущего docker контейнера (текущей вертуальной машины), того самого, в котором и выполняется 
   # данный этап (step), и который основан, на выбранном (в блоке docker текущего этапа) образе. Образ отличается
   # от контейнера тем, что контейнер - это, по сути своей, запущенный образ (виртуальная ОС), в которой могут
   # выполняться различные комманды и могут быть запущенны различные приложения, а, в свою очередь, образ
   # всегда статичен, он является основой для запуска контейнера, потому все комманды, которые выполняются в блоке 
   #  steps, выполняются непосредственно внутри контейнера, а образ - лишь начальное состояние контейнера.
      - save_cache: # Блок отвечающий за сохранение кэша.
          paths:
            - node_modules # Кэшируем установленные зависимости (node_modules).
          key: v1-deps-{{ checksum "yarn.lock" }} # задаём ключ, по которому можно будет понять актуален ли кэш, в нашем
   #  случае, кэш будет актуален в случае, если контрольные суммы файла yarn.lock (его содержимое) не изменилось.
      - persist_to_workspace: # Блок позволяющий передавать данные между различными этапами
          root: . # задаём корневой каталог, от которого будут считаться пути в блоке paths, в нашем случае (точка) -
   # это текущий каталог, в котором мы установили зависимости, вызвав комманду yarn.
          paths:
            - "node_modules" # передаём все установленные зависимости на следующие этапы. С учётом root, путь 
   # будет соответствовать ./node_modules.
  testing: # Описываем 2й этап - этап запуска тестов.
    docker:
      - image: circleci/node:14.15 # Снова образ, образ может быть любым, который нас устроит на текущем 
   # этапе, он никак не связан с предыдущим этапом.
    steps:
      - checkout # Снова забираем содержимое репозитория в контейнер текущего этапа.
      - attach_workspace: # после того, как на предыдущем этапе, мы задали persist_to_workspace, мы имеем право,
    # подтянуть данные, которые были помечены, как персистентные на любом из предыдущих этапов.
          at: . # копируем node_modules из предыдущего этапа в корневую дирректорию docker контейнера текущего этапа.
      - run: yarn test # Можем запустить тесты.

workflows: # workflows - по своей сути это различные сценарии запуска, которые могут включать в себя различные этапы
    main: # Название сценария выполнения
      jobs: # Список этапов данного сценария
        - install-deps 
        - testing:
            requires: # В этом блоке, мы указываем на то, что этап testing не будет запущен (зависит) от этапа устанвоки
   # зависимостей (ведь без них, мы не запустим тесты). Если не указать, то задачи будут запущенны параллельно.
              - install-deps